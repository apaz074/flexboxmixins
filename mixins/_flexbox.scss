/// Los siguientes mixins y variables son de las siguientes propiedades de Flexbox:

/// Variables para los mixins  
/// Para flex-direction.
$flex-direction:(
  row      : row,
  column   : column,
  reverse  : row-reverse,
  creverse : column-reverse
);

/// Para flex-wrap.
$flex-wrap:(
  nwrap    : nowrap,
  wrap     : wrap, 
  wreverse : wrap-reverse
  );

/// Para justify-content.
$justify-content: (
  start   : flex-start,
  end     : flex-end,
  center  : center,
  around  : space-around,
  between : space-between
);

/// Para align-items.
$align-items: (
  stretch  : stretch,
  start    : flex-start,
  end      : flex-end,
  center   : center,
  baseline : baseline
);

/// Para aling-content.
$align-content: (
  strech  : stretch,
  start   : flex-start,
  end     : flex-end,
  center  : center,
  around   : space-around,
  between : space-between
);

/// Propiedades para los elementos hijos:
/// Para align-self.
$align-self: (
  auto     : auto,
  start    : flex-start,
  end      : flex-end,
  center   : center,
  stretch  : stretch,
  baseline : baseline
);

//// Mixins.
//// Mixins para modificar propiedades de Flexbox. 

/// Uso de las diferentes propieades de flex en el padre, con display: flex.
/// @author  Arnoldo Paz
/// @param   {valor} $jContent - Son los valores de justify-conten, se usa el map $justify-content y tiene como valor por default d.
/// @param   {valor} $aling - Son los valores de aling-items o aling-content, se usa los map $aling-items y $aling-contetn. Tiene como valor por default d.
/// @param   {valor} $fWrap - Son los valores de flex-wrap, se usa el map $flex-wrap y tiene como valor por default d.
/// @param   {valor} $fDirection - Son los valores de flex-direction, se usa el map $flex-direction y tiene como valor por default d.
/// Valor d implica que tomara los valores por default.  
/// @example scss
///         .conten {
///             @include flex(between, center, wrap, column);
///          }
@mixin flex($jContent:d, $aling:d, $fWrap:d, $fDirection:d) {
    display : flex;
    @if $fDirection != d and $fWrap == d {
        flex-direction : map-get($flex-direction, $fDirection);
    } @else if $fDirection == d and $fWrap != d {
        flex-wrap : map-get($flex-wrap, $fWrap);
    } @else {
        flex-flow : map-get($flex-direction,$fDirection) map-get($flex-wrap,$fWrap);
    }
    @if $jContent != d {
        justify-content :map-get($justify-content, $jContent);
    }
    @if $fWrap == wrap or $fWrap == wrap-reverse {
        @if $aling != d {
        align-content : map-get($align-content, $aling);
        }
    } @else {
        @if $aling != d {
        align-items : map-get($align-items, $aling);
        }
    }   
}

/// Uso de las diferentes propieades de flex en el padre, con display: inline-flex.
/// @author  Arnoldo Paz
/// @param   {valor} $jContent - Son los valores de justify-conten, se usa el map $justify-content y tiene como valor por default d.
/// @param   {valor} $aling - Son los valores de aling-items o aling-content, se usa los map $aling-items y $aling-contetn. Tiene como valor por default d.
/// @param   {valor} $fWrap - Son los valores de flex-wrap, se usa el map $flex-wrap y tiene como valor por default d.
/// @param   {valor} $fDirection - Son los valores de flex-direction, se usa el map $flex-direction y tiene como valor por default d.
/// Valor d implica que tomara los valores por default.  
/// @example scss
///         .conten {
///             @include flex(around, between, wreverse, creverse);
///          }
@mixin inlineFlex($jContent:d, $aling:d, $fWrap:d, $fDirection:d) {
    display : inline-flex;
    @if $fDirection != d and $fWrap == d {
        flex-direction : map-get($flex-direction, $fDirection);
    } @else if $fDirection == d and $fWrap != d {
        flex-wrap : map-get($flex-wrap, $fWrap);
    } @else {
        flex-flow : map-get($flex-direction,$fDirection) map-get($flex-wrap,$fWrap);
    }
    @if $jContent != d {
        justify-content :map-get($justify-content, $jContent);
    }
    @if $fWrap == wrap or $fWrap == wrap-reverse {
        @if $aling != d {
        align-content : map-get($align-content, $aling);
        }
    } @else {
        @if $aling != d {
        align-items : map-get($align-items, $aling);
        }
    }   
}